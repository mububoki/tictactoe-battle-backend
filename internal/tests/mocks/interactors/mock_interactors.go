// Code generated by MockGen. DO NOT EDIT.
// Source: interactors.go

// Package mock_interactors is a generated GoMock package.
package mock_interactors

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tictactoe_battle "github.com/swallowarc/tictactoe-battle-proto/pkg/tictactoe_battle"
	room "github.com/swallowarc/tictactoe_battle_backend/internal/domains/room"
	ports "github.com/swallowarc/tictactoe_battle_backend/internal/usecases/ports"
)

// MockLoginInteractor is a mock of LoginInteractor interface.
type MockLoginInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockLoginInteractorMockRecorder
}

// MockLoginInteractorMockRecorder is the mock recorder for MockLoginInteractor.
type MockLoginInteractorMockRecorder struct {
	mock *MockLoginInteractor
}

// NewMockLoginInteractor creates a new mock instance.
func NewMockLoginInteractor(ctrl *gomock.Controller) *MockLoginInteractor {
	mock := &MockLoginInteractor{ctrl: ctrl}
	mock.recorder = &MockLoginInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginInteractor) EXPECT() *MockLoginInteractorMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockLoginInteractor) Login(ctx context.Context, login *tictactoe_battle.Login) (*tictactoe_battle.Login, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, login)
	ret0, _ := ret[0].(*tictactoe_battle.Login)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockLoginInteractorMockRecorder) Login(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockLoginInteractor)(nil).Login), ctx, login)
}

// Logout mocks base method.
func (m *MockLoginInteractor) Logout(ctx context.Context, login *tictactoe_battle.Login) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, login)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockLoginInteractorMockRecorder) Logout(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockLoginInteractor)(nil).Logout), ctx, login)
}

// MockBattleInteractor is a mock of BattleInteractor interface.
type MockBattleInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockBattleInteractorMockRecorder
}

// MockBattleInteractorMockRecorder is the mock recorder for MockBattleInteractor.
type MockBattleInteractorMockRecorder struct {
	mock *MockBattleInteractor
}

// NewMockBattleInteractor creates a new mock instance.
func NewMockBattleInteractor(ctrl *gomock.Controller) *MockBattleInteractor {
	mock := &MockBattleInteractor{ctrl: ctrl}
	mock.recorder = &MockBattleInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBattleInteractor) EXPECT() *MockBattleInteractorMockRecorder {
	return m.recorder
}

// Attack mocks base method.
func (m *MockBattleInteractor) Attack(ctx context.Context, roomID room.ID, player tictactoe_battle.Player, position tictactoe_battle.Position, pieceSize tictactoe_battle.Piece) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attack", ctx, roomID, player, position, pieceSize)
	ret0, _ := ret[0].(error)
	return ret0
}

// Attack indicates an expected call of Attack.
func (mr *MockBattleInteractorMockRecorder) Attack(ctx, roomID, player, position, pieceSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attack", reflect.TypeOf((*MockBattleInteractor)(nil).Attack), ctx, roomID, player, position, pieceSize)
}

// CanEnter mocks base method.
func (m *MockBattleInteractor) CanEnter(ctx context.Context, roomID room.ID, loginID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanEnter", ctx, roomID, loginID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanEnter indicates an expected call of CanEnter.
func (mr *MockBattleInteractorMockRecorder) CanEnter(ctx, roomID, loginID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanEnter", reflect.TypeOf((*MockBattleInteractor)(nil).CanEnter), ctx, roomID, loginID)
}

// Create mocks base method.
func (m *MockBattleInteractor) Create(ctx context.Context) (room.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx)
	ret0, _ := ret[0].(room.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBattleInteractorMockRecorder) Create(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBattleInteractor)(nil).Create), ctx)
}

// Declaration mocks base method.
func (m *MockBattleInteractor) Declaration(ctx context.Context, roomID room.ID, loginID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Declaration", ctx, roomID, loginID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Declaration indicates an expected call of Declaration.
func (mr *MockBattleInteractorMockRecorder) Declaration(ctx, roomID, loginID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Declaration", reflect.TypeOf((*MockBattleInteractor)(nil).Declaration), ctx, roomID, loginID)
}

// Enter mocks base method.
func (m *MockBattleInteractor) Enter(ctx context.Context, roomID room.ID, loginID string) (ports.BattleListener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enter", ctx, roomID, loginID)
	ret0, _ := ret[0].(ports.BattleListener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enter indicates an expected call of Enter.
func (mr *MockBattleInteractorMockRecorder) Enter(ctx, roomID, loginID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enter", reflect.TypeOf((*MockBattleInteractor)(nil).Enter), ctx, roomID, loginID)
}

// Leave mocks base method.
func (m *MockBattleInteractor) Leave(ctx context.Context, roomID room.ID, loginID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Leave", ctx, roomID, loginID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Leave indicates an expected call of Leave.
func (mr *MockBattleInteractorMockRecorder) Leave(ctx, roomID, loginID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leave", reflect.TypeOf((*MockBattleInteractor)(nil).Leave), ctx, roomID, loginID)
}

// Pick mocks base method.
func (m *MockBattleInteractor) Pick(ctx context.Context, roomID room.ID, player tictactoe_battle.Player, position tictactoe_battle.Position, pieceSize tictactoe_battle.Piece) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pick", ctx, roomID, player, position, pieceSize)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pick indicates an expected call of Pick.
func (mr *MockBattleInteractorMockRecorder) Pick(ctx, roomID, player, position, pieceSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pick", reflect.TypeOf((*MockBattleInteractor)(nil).Pick), ctx, roomID, player, position, pieceSize)
}

// Reset mocks base method.
func (m *MockBattleInteractor) Reset(ctx context.Context, roomID room.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", ctx, roomID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockBattleInteractorMockRecorder) Reset(ctx, roomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockBattleInteractor)(nil).Reset), ctx, roomID)
}
