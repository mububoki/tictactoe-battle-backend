// Code generated by MockGen. DO NOT EDIT.
// Source: rule.go

// Package mock_battle is a generated GoMock package.
package mock_battle

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tictactoe_battle "github.com/swallowarc/tictactoe-battle-proto/pkg/tictactoe_battle"
	battle "github.com/swallowarc/tictactoe_battle_backend/internal/domains/battle"
)

// MockRule is a mock of Rule interface.
type MockRule struct {
	ctrl     *gomock.Controller
	recorder *MockRuleMockRecorder
}

// MockRuleMockRecorder is the mock recorder for MockRule.
type MockRuleMockRecorder struct {
	mock *MockRule
}

// NewMockRule creates a new mock instance.
func NewMockRule(ctrl *gomock.Controller) *MockRule {
	mock := &MockRule{ctrl: ctrl}
	mock.recorder = &MockRuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRule) EXPECT() *MockRuleMockRecorder {
	return m.recorder
}

// Attack mocks base method.
func (m *MockRule) Attack(b *battle.Battle, player tictactoe_battle.Player, pos tictactoe_battle.Position, size tictactoe_battle.Piece) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attack", b, player, pos, size)
	ret0, _ := ret[0].(error)
	return ret0
}

// Attack indicates an expected call of Attack.
func (mr *MockRuleMockRecorder) Attack(b, player, pos, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attack", reflect.TypeOf((*MockRule)(nil).Attack), b, player, pos, size)
}

// Declaration mocks base method.
func (m *MockRule) Declaration(b *battle.Battle, playerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Declaration", b, playerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Declaration indicates an expected call of Declaration.
func (mr *MockRuleMockRecorder) Declaration(b, playerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Declaration", reflect.TypeOf((*MockRule)(nil).Declaration), b, playerID)
}

// OpenBattle mocks base method.
func (m *MockRule) OpenBattle() *battle.Battle {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenBattle")
	ret0, _ := ret[0].(*battle.Battle)
	return ret0
}

// OpenBattle indicates an expected call of OpenBattle.
func (mr *MockRuleMockRecorder) OpenBattle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenBattle", reflect.TypeOf((*MockRule)(nil).OpenBattle))
}

// Pick mocks base method.
func (m *MockRule) Pick(b *battle.Battle, player tictactoe_battle.Player, pos tictactoe_battle.Position, size tictactoe_battle.Piece) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pick", b, player, pos, size)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pick indicates an expected call of Pick.
func (mr *MockRuleMockRecorder) Pick(b, player, pos, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pick", reflect.TypeOf((*MockRule)(nil).Pick), b, player, pos, size)
}

// Reset mocks base method.
func (m *MockRule) Reset(b *battle.Battle) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset", b)
}

// Reset indicates an expected call of Reset.
func (mr *MockRuleMockRecorder) Reset(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockRule)(nil).Reset), b)
}
